name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-22.04

    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USERNAME }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    services:
      postgres:
        image: postgres:12.0-alpine
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> env.properties
          echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> env.properties
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> env.properties
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> env.properties
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> env.properties
          echo "GPT_API_KEY=${{ secrets.GPT_API_KEY }}" >> env.properties
          echo "JWT_EXPIRE_LENGTH=${{ secrets.JWT_EXPIRE_LENGTH }}" >> env.properties
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> env.properties
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> env.properties
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> env.properties
          echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> env.properties
          echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}" >> env.properties
          echo "NEO4J_URI=${{ secrets.NEO4J_URI }}" >> env.properties
          echo "NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}" >> env.properties
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> env.properties
          echo "POSTGRES_URL=jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}" >> env.properties
          echo "POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}" >> env.properties
          cp env.properties ./src/main/resources

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {30..0}; do
            if docker exec $(docker ps -q --filter name=postgres) pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          if [ $i -eq 0 ]; then
            echo "PostgreSQL did not become ready in time"
            docker logs $(docker ps -q --filter name=postgres)
            exit 1
          fi
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GPT_API_KEY: ${{ secrets.GPT_API_KEY }}
          JWT_EXPIRE_LENGTH: ${{ secrets.JWT_EXPIRE_LENGTH }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
          NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_URL: jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}
          POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}